{"version":3,"sources":["firebase.js","App.js","Form.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","Component","handleChange","event","setState","userInput","target","value","handleClick","preventDefault","database","ref","push","state","completedBook","checkedBook","books","on","data","bookEntries","firebaseData","val","key","className","htmlFor","type","id","onChange","this","onClick","href","map","book","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAcAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECoGeS,G,MClHIC,Y,kDDIjB,aAAgB,IAAD,8BACb,gBAsBFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,UAAWF,EAAMG,OAAOC,SAzBb,EA4BfC,YAAc,SAACL,GACbA,EAAMM,iBAEQlB,EAASmB,WAAWC,MAC5BC,KAAK,EAAKC,MAAMR,YAhCT,EAqCfS,cAAgB,WAIAvB,EAASmB,WAAWC,MAC5BC,KAAK,EAAKC,MAAMR,UAAUU,cAxChC,EAAKF,MAAQ,CACXG,MAAO,GACPX,UAAW,IAJA,E,gEAOM,IAAD,OACJd,EAASmB,WAAWC,MAC5BM,GAAG,SAAS,SAACC,GAEjB,IAAIC,EAAc,GAEZC,EAAeF,EAAKG,MAE1B,IAAK,IAAIC,KAAOF,EACdD,EAAYP,KAAKQ,EAAaE,IAEhC,EAAKlB,SAAS,CACZY,MAAOG,S,+BA+BX,OACE,sBAAKI,UAAU,MAAf,UACE,mCACE,0CACA,qBAAKA,UAAU,iBAAf,SACE,+BACE,qCACE,uBAAOC,QAAQ,YAAf,2CACA,8BACE,uBACEC,KAAK,OACLC,GAAG,YACHC,SAAUC,KAAK1B,aACfK,MAAOqB,KAAKf,MAAMR,qBAS5B,qBAAKkB,UAAU,gBAAf,SACE,wBAAQM,QAASD,KAAKpB,YAAtB,yBAEF,qBAAKe,UAAU,QAAf,SACE,mBAAGO,KAAK,iBAAR,SAAyB,mBAAGP,UAAU,+BAG1C,+BACE,kCACE,qBAAKA,UAAU,gBAAgBG,GAAG,gBAAlC,SACA,6BAEEE,KAAKf,MAAMG,MAAMe,KAAI,SAACC,GACpB,OACE,qBAAKT,UAAU,sBAAf,SACE,6BACE,8BAGE,mBAAGA,UAAU,kBAAqBS,2B,GA5FxC/B,cEOHgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ef93e9e7.chunk.js","sourcesContent":["\nimport firebase from \"firebase/app\"\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDGzArJAyAy60E1TosMjt-o3m0e1uSDj1k\",\n    authDomain: \"youreads-cecef.firebaseapp.com\",\n    databaseURL: \"https://youreads-cecef.firebaseio.com\",\n    projectId: \"youreads-cecef\",\n    storageBucket: \"youreads-cecef.appspot.com\",\n    messagingSenderId: \"316193822330\",\n    appId: \"1:316193822330:web:a207f13bec880faea58dc3\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import {Component} from \"react\";\nimport firebase from \"./firebase.js\"\nimport \"./App.css\";\nimport Form from \"./Form.js\";\n\nclass App extends Component  {\n  constructor () {\n    super ();\n    this.state = {\n      books: [],\n      userInput: \"\"\n    }\n  }\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on(\"value\", (data) => {\n\n      let bookEntries = [];\n\n      const firebaseData = data.val();\n\n      for (let key in firebaseData) {\n        bookEntries.push(firebaseData[key]);\n      }\n      this.setState({\n        books: bookEntries\n      })\n    })\n  } \n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value\n    })\n  }\n  handleClick = (event) => {\n    event.preventDefault();\n\n    const dbRef = firebase.database().ref();\n    dbRef.push(this.state.userInput)\n  }\n\n\n\n  completedBook = () => { \n\n    const checkedBook = \"done\"\n\n    const dbRef = firebase.database().ref();\n    dbRef.push(this.state.userInput.checkedBook)\n\n    \n\n\n  }\n\n  render () {\n    return (\n      <div className=\"app\">\n        <header> \n          <h1>youreads</h1>\n          <div className=\"input-text-bar\">\n            <form>\n              <fieldset>\n                <label htmlFor=\"bookEntry\">Enter a book you want to read</label>\n                <div>\n                  <input\n                    type=\"text\"\n                    id=\"bookEntry\"\n                    onChange={this.handleChange}\n                    value={this.state.userInput}\n                  />\n\n                </div>\n            \n              </fieldset>\n            </form>\n       \n          </div>\n          <div className=\"submit-button\">\n            <button onClick={this.handleClick}> Add book</button>\n          </div>\n          <div className=\"arrow\">\n            <a href=\"#list-of-books\"><i className=\"fas fa-chevron-down\"></i></a>\n          </div>\n        </header>\n        <main>\n          <section>\n            <div className=\"list-of-books\" id=\"list-of-books\">\n            <ul> \n            {\n              this.state.books.map((book) => {\n                return (\n                  <div className=\"book-list-container\">\n                    <li>\n                      <p>\n                \n                        \n                        <i className=\"far fa-square\"></i>{book}\n                      \n                      </p>\n                    </li>\n                  </div>\n                )\n              })\n            }\n          </ul>\n            </div>\n          </section>\n        </main>\n      </div>\n    );\n\n  }\n  \n}\n\nexport default App;\n\n\n// Create two new components:\n  // text input bar + submit button {Form!}\n  // to read-item section (list of books, checkmark, delete item button)\n\n// Configure firebase on React\n\n// In firebase, store the user's value from input bar using the handleChange method and push it into the database using the handleClick method. \n\n// Grab data from Firebase using componentDidMount\n\n//Take these values (the to-read books) and put it in state -> an empty array that holds user's input\n\n// Map through the book state to display each book on page\n\n// When a user marks a book read (clicks on a to-read list item), state is updated so that the to-read list item is crossed-off (or greyed out).","import { Component } from \"react\";\n\nclass Form extends Component {\n    render () {\n        return ( \n            <div className= \"input-text-bar\">\n                <form> \n                    <fieldset>\n                        <label htmlFor=\"bookEntry\">Enter a book you want to read</label>\n                        <div> \n                            <input \n                                type=\"text\" \n                                id=\"bookEntry\" \n                                onChange={this.handleChange}\n                                value={this.state.userInput}\n                            />\n\n                        </div>\n                        <div> \n                            <label htmlFor=\"addBook\">Add Book</label>\n                            <input \n                                type=\"submit\"\n                                id=\"addBook\"\n                                onClick={this.handleClick}\n                            />\n\n                        </div>\n                    </fieldset>\n                </form>\n            </div>\n\n        )\n    }\n\n}\n\n\n\n\n\n\n\n\n\nexport default Form;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}